pragma solidity ^0.4.23;
pragma experimental ABIEncoderV2;

import "../contracts/bls.sol";
import "truffle/Assert.sol";
import "truffle/DeployedAddresses.sol";

contract TestBLS {
  function testVerify() public {
    BLS.G2Point memory pk;
    pk.X = [18523194229674161632574346342370534213928970227736813349975332190798837787897, 5725452645840548248571879966249653216818629536104756116202892528545334967238];
    pk.Y = [3816656720215352836236372430537606984911914992659540439626020770732736710924, 677280212051826798882467475639465784259337739185938192379192340908771705870];

    BLS bls = new BLS(pk, 0, 0);

    bytes memory message = hex"7b0a2020226f70656e223a207b0a20202020227072696365223a2039353931372c0a202020202274696d65223a207b0a20202020202022756e6978223a20313438333134323430302c0a2020202020202269736f223a2022323031362d31322d33315430303a30303a30302e3030305a220a202020207d0a20207d2c0a202022636c6f7365223a207b0a20202020227072696365223a2039363736302c0a202020202274696d65223a207b0a20202020202022756e6978223a20313438333232383830302c0a2020202020202269736f223a2022323031372d30312d30315430303a30303a30302e3030305a220a202020207d0a20207d2c0a2020226c6f6f6b7570223a207b0a20202020227072696365223a2039363736302c0a20202020226b223a20312c0a202020202274696d65223a207b0a20202020202022756e6978223a20313438333232383830302c0a2020202020202269736f223a2022323031372d30312d30315430303a30303a30302e3030305a220a202020207d0a20207d0a7d0a6578616d706c652e636f6d2f6170692f31";

    BLS.G1Point memory signature;
    signature.X = 11181692345848957662074290878138344227085597134981019040735323471731897153462;
    signature.Y = 6479746447046570360435714249272776082787932146211764251347798668447381926167;

    bool ret = bls.verify(message, signature);
    bool expected = true;
    Assert.equal(ret, expected, "Test signature verification");
  }

  function testPrinter() public {
    BLS.G2Point memory pk;
    pk.X = [18523194229674161632574346342370534213928970227736813349975332190798837787897, 5725452645840548248571879966249653216818629536104756116202892528545334967238];
    pk.Y = [3816656720215352836236372430537606984911914992659540439626020770732736710924, 677280212051826798882467475639465784259337739185938192379192340908771705870];
    BLS bls = new BLS(pk, 0, 0);

    uint sk = 1;
    bytes memory message = hex"93364c066a036a728e8c4f6363b22dba80aa0c67b1628bdec11e3fd79c19ce361110";

    bool ret = bls.printer(message, sk);
    bool expected = false; // true
    Assert.equal(ret, expected, "");
  }

  function testCommit() public {
    // NOTE: we set the private key is 1 for testing purposes,
    // so the public key (pk) is the generator of G2
    BLS.G2Point memory pk;
    pk.X = [11559732032986387107991004021392285783925812861821192530917403151452391805634, 10857046999023057135944570762232829481370756359578518086990519993285655852781];
    pk.Y = [4082367875863433681332203403145435568316851327593401208105741076214120093531, 8495653923123431417604973247489272438418190587263600148770280649306958101930];
    uint timeout = now + 10;
    uint id = 5; // auction unique identifier
    BLS bls = new BLS(pk, timeout, id);

    // The message contains the concatenation of:
    //  1. the user address (EcFcaB0A285d3380E488A39B4BB21e777f8A4EaC)
    //  2. the auction id (1)
    //  3. a random number (1)
    //  4. the user's bid (10)
    bytes memory message = hex"EcFcaB0A285d3380E488A39B4BB21e777f8A4EaC1110";

    // NOTE: in this example the blinding factor is 1.
    BLS.G1Point memory htilde;
    htilde.X = 18819754569743482569887052984505864001615441746448356941711264750460996969405;
    htilde.Y = 765224087138569380659290525747859338764504959560689318906038164515145477981;

    bool ret = bls.commit(htilde);
    bool expected = true;
    Assert.equal(ret, expected, "Test commit algorithm");
  }

  function testReveal() public {
    // NOTE: we set the private key is 1 for testing purposes,
    // so the public key (pk) is the generator of G2
    BLS.G2Point memory pk;
    pk.X = [11559732032986387107991004021392285783925812861821192530917403151452391805634, 10857046999023057135944570762232829481370756359578518086990519993285655852781];
    pk.Y = [4082367875863433681332203403145435568316851327593401208105741076214120093531, 8495653923123431417604973247489272438418190587263600148770280649306958101930];
    uint timeout = now + 10;
    uint id = 5; // auction unique identifier
    BLS bls = new BLS(pk, timeout, id);

    // The message contains the concatenation of:
    //  1. the user address (EcFcaB0A285d3380E488A39B4BB21e777f8A4EaC)
    //  2. the auction id (1)
    //  3. a random number (1)
    //  4. the user's bid (10)
    bytes memory message = hex"EcFcaB0A285d3380E488A39B4BB21e777f8A4EaC1110";

    BLS.G1Point memory signature;
    signature.X = 18819754569743482569887052984505864001615441746448356941711264750460996969405;
    signature.Y = 765224087138569380659290525747859338764504959560689318906038164515145477981;

    bool ret = bls.reveal(message, signature);
    bool expected = true;
    Assert.equal(ret, expected, "Test reveal algorithm");
  }
}
